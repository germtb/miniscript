import { map } from 'List'
import { log, pipeLog } from 'Debug'
import { Nothing } from 'Debug'

keys = object => match object
  | {} -> []
  | { #x, ...xs } -> [ x.key, ...keys(xs) ]

values = object => match object
  | {} -> []
  | { #x, ...xs } -> [ x.value, ...values(xs) ]

entries = object => match object
  | {} -> []
  | { #x, ...xs } -> [ x, ...entries(xs) ]

get = (key, object) => object?#key

insert = (key, value, object) => {
  ...object,
  #key: value
}

filter = (selector, object) => match object
  | {} -> {}
  | { #x, ...xs } -> (match selector(x.key, x.value)
    | true -> { #x.key: x.value, ...filter(selector, xs) }
    | false -> filter(selector, xs)
  )

module = {
  get,
  keys,
  values,
  entries
}
