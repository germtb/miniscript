import {
	map,
	flatMap,
	reduce,
	some,
	head,
	tail,
	filter,
	all,
	take,
	drop,
	first,
	length,
	zip,
	reverse,
	intersperse,
	join,
	sum
} from 'List'
import { Just, Nothing } from 'Maybe'
import { Success, Error } from 'Errable'
import { test, describe, expect } from 'Test'

describe('List', [
	test('map', [
		expect(map(x => x, [0, 1, 2])).toDeepEqual([0, 1, 2]),
		expect(map(x => 2 * x, [0, 1, 2])).toDeepEqual([0, 2, 4])
	]),
	test('flatMap', [
		expect(flatMap(x => [x, x], [0, 1, 2])).toDeepEqual([0, 0, 1, 1, 2, 2]),
		expect(flatMap(x => [2 * x], [0, 1, 2])).toDeepEqual([0, 2, 4])
	]),
	test('reduce', [
		expect(reduce((acc, x) => acc + x, [0, 1, 2], 0)).toEqual(3)
	]),
	test('some', [
		expect(some(x => x > 1, [0, 1, 2])).toBeTrue(),
		expect(some(x => x > 2, [0, 1, 2])).toBeFalse()
	]),
	test('all', [
		expect(all(x => x >= 0, [0, 1, 2])).toBeTrue(),
		expect(all(x => x > 2, [0, 1, 2])).toBeFalse()
	]),
	test('head', [expect(head([0, 1, 2])).toDeepEqual(Just(0))]),
	test('tail', [expect(tail([0, 1, 2])).toDeepEqual(Just([1, 2]))]),
	test('filter', [expect(filter(x => x > 1, [0, 1, 2])).toDeepEqual([2])]),
	test('length', [
		expect(length([])).toEqual(0),
		expect(length([0, 1, 2])).toEqual(3)
	]),
	test('take', [
		expect(take(1, [0, 1, 2])).toDeepEqual([0]),
		expect(take(2, [0, 1, 2])).toDeepEqual([0, 1])
	]),
	test('drop', [
		expect(drop(1, [0, 1, 2])).toDeepEqual([1, 2]),
		expect(drop(2, [0, 1, 2])).toDeepEqual([2])
	]),
	test('first', [
		expect(first(x => x > 1, [0, 1, 2])).toDeepEqual(Just(2)),
		expect(first(x => x > 0, [0, 1, 2])).toDeepEqual(Just(1)),
		expect(first(x => x > 3, [0, 1, 2])).toDeepEqual(Nothing())
	]),
	test('zip', [
		expect(zip([], [])).toDeepEqual(Success([])),
		expect(zip([1], [2])).toDeepEqual(Success([[1, 2]])),
		expect(zip([], [2])).toDeepEqual(Error('zipped lists differ in length')),
		expect(zip([1, 2], [3, 4])).toDeepEqual(Success([[1, 3], [2, 4]]))
	]),
	test('reverse', [
		expect(reverse([])).toDeepEqual([]),
		expect(reverse([1])).toDeepEqual([1]),
		expect(reverse([1, 2, 3])).toDeepEqual([3, 2, 1])
	]),
	test('intersperse', [
		expect(intersperse('a', [])).toDeepEqual([]),
		expect(intersperse('a', [1])).toDeepEqual([1]),
		expect(intersperse('a', [1, 2])).toDeepEqual([1, 'a', 2])
	]),
	test('sum', [
		expect(sum(0, [])).toEqual(0),
		expect(sum(1, [1])).toEqual(2),
		expect(sum('', ['1', '2'])).toEqual('12')
	]),
	test('join', [
		expect(join('a', [])).toEqual(''),
		expect(join('a', [1])).toEqual('1'),
		expect(join('a', [1, 2])).toEqual('1a2')
	])
])
