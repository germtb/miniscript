import { Err, Ok } from 'Result'
import { stringify } from 'String'
import { Nothing, Just } from 'Maybe'

map = (f, list) => match list
  | [] -> []
  | [x, ...xs] -> [ f(x), ...map(f, xs) ]

flatMap = (f, list) => match list
  | [] -> []
  | [x, ...xs] -> concat(f(x), flatMap(f, xs))

head = list => match list
  | [] -> Nothing()
  | [x, ...xs] -> Just(x)

reduce = (f, list, acc) => match list
  | [] -> acc
  | [x, ...xs] -> reduce(f, xs, f(acc, x))

concat = (list1, list2) => match list1
  | [] -> list2
  | [x, ...xs] -> [x, ...concat(xs, list2)]

map2 = (f, list1, list2) => match [list1, list2]
  | [_, []] -> []
  | [[], _] -> []
  | [[x, ...xs], [y, ...ys]] -> [f(x, y), ...map2(f, list1, list2)]

some = (selector, list) => reduce(
  (acc, x) => acc or selector(x),
  list,
  false
)

tail = list => match list
  | [] -> Nothing()
  | [x, ...xs] -> Just(xs)

filter = (selector, list) => match list
  | [] -> []
  | [x, ...xs] -> (match selector(x)
    | true -> [x, ...filter(selector, xs)]
    | false -> filter(selector, xs)
  )

all = (selector, list) => reduce(
  (acc, x) => acc and selector(x),
  list,
  true
)

take = (n, list) => match [n, list]
  | [0, _]  -> []
  | [_, []] -> []
  | [n, [x, ...xs]] -> [ x, ...take(n - 1, xs) ]

drop = (n, list) => match [n, list]
  | [0, _] -> list
  | [_, []] -> []
  | [n, [x, ...xs]] -> drop(n - 1, xs)

first = (selector, list) => match list
  | [] -> Nothing()
  | [x, ...xs] -> (match selector(x)
    | true -> Just(x)
    | false -> first(selector, xs)
  )

range = (start, end) => match (end - start) > 0
  | false -> []
  | true  -> [ start, ...range(start + 1, end) ]

length = list => reduce(acc => acc + 1, list, 0)

zip = (list1, list2) => match [list1, list2]
  | [_, []] -> []
  | [[], _] -> []
  | [[x, ...xs], [y, ...ys]] -> [[x, y], ...zip(xs, ys)]

queue = (element, list) => match List
  | [] -> [element]
  | [x, ...xs] -> [x, ...queue(element, xs)]

reverse = list => match list
  | [] -> []
  | [x, ...xs] -> queue(reverse(x), x)

intersperse = (element, list) => match list
  | [] -> []
  | [x] -> [x]
  | [x, y, ...xs] -> [ x, element, interspere(element, [y, ...xs]) ]

sum = (initialValue, list) => reduce(
  (acc, x) => acc + x,
  list,
  initialValue
)

join = (element, list) => intersperse(element, list)
  |> map(stringify)
  |> sum('')

module = {
  map,
  flatMap,
  reduce,
  some,
  head,
  tail,
  filter,
  all,
  take,
  drop,
  first,
  length,
  zip,
  reverse,
  intersperse,
  join,
  sum
}
