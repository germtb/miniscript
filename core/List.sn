import { Nothing, Just } from 'Maybe'
import { Error, Success } from 'Errable'
import { log } from 'Debug'

map = (f, list) => match list
  | [] -> []
  | [ x, ...xs ] -> [ f(x), ... map(f, xs) ]

andThen = (f, list) => match list
  | [] -> []
  | [x, ...xs] -> [...f(x), ...andThen(f, xs)]

reduce = (f, list, acc) => match list
  | [] -> acc
  | [ x, ...xs ] -> reduce(f, xs, f(acc, x))

some = (selector, list) => reduce(
  (acc, x) => acc || selector(x),
  list,
  false
)

head = list => match list
  | [] -> Nothing()
  | [x, ...xs] -> Just(x)

tail = list => match list
  | [] -> Nothing()
  | [x, ...xs] -> Just(xs)

filter = (selector, list) => match list
  | [] -> []
  | [x, ...xs] -> (match selector(x)
    | true -> [x, ...filter(selector, xs)]
    | false -> filter(selector, xs)
  )

all = (selector, list) => reduce(
  (acc, x) => acc && selector(x),
  list,
  true
)

take = (n, list) => match [n, list]
  | [0, _]  -> []
  | [_, []] -> []
  | [n, [ x, ...xs ]] -> [x, ...take(n - 1, xs)]

drop = (n, list) => match [n, list]
  | [0, _] -> list
  | [_, []] -> []
  | [n, [ x, ...xs]] -> [...drop(n - 1, xs)]

first = (selector, list) => match list
  | [] -> Nothing()
  | [x, ...xs] -> (match selector(x)
    | true -> Just(x)
    | false -> first(selector, xs)
  )

length = list => reduce((acc, _) => acc + 1, list, 0)

unsafeZip = (list1, list2) => match [list1, list2]
  | [[], []] -> []
  | [[x, ...xs], [y, ...ys]] -> [[x, y], ...unsafeZip(xs, ys)]

zip = (list1, list2) => match length(list1) == length(list2)
  | false -> Error('zipped lists differ in length')
  | true -> Success(unsafeZip(list1, list2))

reverse = list => match list
  | [] -> []
  | [x, ...xs] -> [...reverse(xs), x]

intersperse = (element, list) => match list
  | [] -> []
  | [x] -> [x]
  | [x, y, ...xs] -> [x, element, ...intersperse(element, [y, ...xs])]

module = {
  map,
  andThen,
  reduce,
  some,
  head,
  tail,
  filter,
  all,
  take,
  drop,
  first,
  length,
  zip,
  reverse,
  intersperse
}
