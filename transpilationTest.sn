head = list => match list
  | [] -> Nothing()
  | [x, ...xs] -> Just(x)

filter = (selector, list) => match list
	| [] -> []
	| [x, ...xs] -> (match selector(x)
		| true -> [x, ...filter(selector, xs)]
		| false -> filter(selector, xs)
	)

Nothing = () => { type: 'Nothing' }

Just = value => { type: 'Just', value }

map = (f, maybe) => match maybe.type
  | 'Nothing' -> Nothing()
  | 'Just' -> Just(f(maybe.value))

withDefault = (value, maybe) => match maybe.type
  | 'Nothing' -> value
  | 'Just' -> maybe.value

x = [ 8, 10 , 9 ]
	|> filter(x => x > 8)
	|> head
	|> map(x => 10 * x)
	|> withDefault('Did not work')

y = []
	|> filter(x => x > 8)
	|> head
	|> map(x => 10 * x)
	|> withDefault('Did not work')

console.log(x)
console.log(y)
